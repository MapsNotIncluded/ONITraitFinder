@inherits LayoutComponentBase
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<MudThemeProvider @ref="@_mudThemeProvider" Theme="@_theme" IsDarkMode="LocalStorageHelper.DarkThemeActive" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <MudFab Style="position:fixed;top:25px;left:25px; z-index:99;"
            StartIcon="@((_drawerOpen?@Icons.Material.Filled.Close:@Icons.Material.Filled.Settings))"
            Color="Color.Primary"
            OnClick="(_)=>ToggleDrawer()">
    </MudFab>
    <MudPaper MinHeight="100px" Elevation="10" MinWidth="100px" hidden="@(!_drawerOpen)" Style=" position:fixed;top:100px;left:25px; z-index:99;">
        <MudStack Style="padding:5px">
            <MudSwitch T="bool" @bind-Value="@PersistantTraitOrdering" Color="@Color.Success" UncheckedColor="@Color.Error" Label="Results inherit trait select order"></MudSwitch>
            <MudSwitch T="bool" @bind-Value="@HideTraitlessAsteroids" Color="@Color.Success" UncheckedColor="@Color.Error" Label="Hide asteroids without traits in results"></MudSwitch>
            <MudSwitch T="bool" ThumbIcon="@DarkLightModeButtonIcon" ThumbIconColor="@Color.Primary" @bind-Value="@LocalStorageHelper.DarkThemeActive" Label="Theme"></MudSwitch>
        </MudStack>
    </MudPaper>

    <MudMainContent Class="pa-8">X

        @Body
    </MudMainContent>
</MudLayout>


<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool _drawerOpen = false;


    private MudTheme? _theme = null;
    private MudThemeProvider _mudThemeProvider;

    public bool PersistantTraitOrdering
    {
        get => _persistantTraitOrdering;
        set
        {
            _persistantTraitOrdering = value;
            SetTraitOrderingPersistent(value);
        }
    }
    private bool _persistantTraitOrdering = false;

    public void SetTraitOrderingPersistent(bool enabled)
    {
        localStorage.SetItemAsync(LocalStorageHelper.PersistantTraitOrderingKey, enabled);
        LocalStorageHelper.UsePersistentTraitOrdering = enabled;
    }
    public bool HideTraitlessAsteroids
    {
        get => _hideTraitlessAsteroids;
        set
        {
            _hideTraitlessAsteroids = value;
            SetHideTraitless(value);
        }
    }
    private bool _hideTraitlessAsteroids = false;

    public void SetHideTraitless(bool enabled)
    {
        localStorage.SetItemAsync(LocalStorageHelper.HideTraitlessKey, enabled);
        LocalStorageHelper.HideTraitlessAsteroids = enabled;

    }

    protected override async Task OnInitializedAsync()
    {
        PersistantTraitOrdering = await localStorage.GetItemAsync<bool>(LocalStorageHelper.PersistantTraitOrderingKey);
        HideTraitlessAsteroids = await localStorage.GetItemAsync<bool>(LocalStorageHelper.HideTraitlessKey);
        LocalStorageHelper.DarkThemeActive = await _mudThemeProvider.GetSystemPreference();

        await base.OnInitializedAsync();
    }

    protected override void OnInitialized()

    {

        base.OnInitialized();


        _theme = new()

            {
                PaletteLight = _lightPalette,
                PaletteDark = _darkPalette,
                LayoutProperties = new LayoutProperties()

            };

    }

    private void DarkModeToggle()
    {
        LocalStorageHelper.DarkThemeActive = !LocalStorageHelper.DarkThemeActive;
    }
    private void ToggleDrawer()
    {
        _drawerOpen = !_drawerOpen;
    }



    private readonly PaletteLight _lightPalette = new()

        {

            Black = "#110e2d",

            AppbarText = "#424242",

            AppbarBackground = "rgba(255,255,255,0.8)",

            DrawerBackground = "#ffffff",

            GrayLight = "#e8e8e8",

            GrayLighter = "#f9f9f9",

        };



    private readonly PaletteDark _darkPalette = new()

        {

            Primary = "#7e6fff",

            Surface = "#1e1e2d",

            Background = "#1a1a27",

            BackgroundGray = "#151521",

            AppbarText = "#92929f",

            AppbarBackground = "rgba(26,26,39,0.8)",

            DrawerBackground = "#1a1a27",

            ActionDefault = "#74718e",

            ActionDisabled = "#9999994d",
            //ActionDisabled = "rgb(255, 187, 40)",

            ActionDisabledBackground = "#605f6d4d",
            //ActionDisabledBackground = "rgb(135, 68, 102)",

            TextPrimary = "#b2b0bf",

            TextSecondary = "#92929f",

            TextDisabled = "#ffffff33",

            DrawerIcon = "#92929f",

            DrawerText = "#92929f",

            GrayLight = "#2a2833",

            GrayLighter = "#1e1e2d",

            Info = "#4a86ff",

            Success = "#3dcb6c",

            Warning = "#ffb545",

            Error = "#ff3f5f",

            LinesDefault = "#33323e",

            TableLines = "#33323e",

            Divider = "#292838",

            OverlayLight = "#1e1e2d80",

        };


    public string DarkLightModeButtonIcon => LocalStorageHelper.DarkThemeActive
    switch
    {

        true => Icons.Material.Rounded.DarkMode,

        false => Icons.Material.Outlined.LightMode ,

    };
}


