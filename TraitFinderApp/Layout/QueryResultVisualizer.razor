@using OniStarmapGenerator.Model
@using OniStarmapGenerator.Model.Search
@using System.Net.Http.Headers
@using System.Timers
@using TraitFinderApp.Client.Model.Search
@using TraitFinderApp.Model.Search
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@inject ISnackbar Snackbar;
@inject ClipboardService ClipboardService
@inject IStringLocalizer<App> L
@inject HttpClient Http
@inject IJSRuntime JSRuntime;
@inject IWebAssemblyHostEnvironment Env

<MudItem>
	<MudPaper Outlined Elevation="10" Class="pa-1" Width="300px">
		<MudStack Row Spacing="1" AlignItems="AlignItems.Center" Justify="Justify.Center"><MudText Style="padding:4px" Typo="Typo.h6">@QueryResult.GetCoordinate()</MudText></MudStack>
				
		<MudStack Spacing="2">
			<MudStack Row Spacing="1" AlignItems="AlignItems.Center" Justify="Justify.Center">
				<MudTooltip Arrow Text="@L["Copy the coordinate to the clipboard"]">
					<MudFab Size=Size.Medium EndIcon="@Icons.Material.Filled.ContentCopy" IconColor="Color.Tertiary" OnClick="(_)=> CopyToClipboard(QueryResult.GetCoordinate())"></MudFab>
				</MudTooltip>

				@if (MNI_Embedded)
				{
					if (IsFailedSeed)
					{
						<MudTooltip Arrow Text="@L["Seed failed generating!"]">  
							<MudIcon Icon="@Icons.Material.Filled.Error" Color="Color.Error" Style="font-size: 57px; margin-top:3px; margin-bottom:-3px"></MudIcon>
						</MudTooltip>
					}
					else
					{
						<MudTooltip Arrow Text="@L[LocalStorageHelper.TryGetMNIToken(out _)?"Request the coordinate to be added to the Map Explorer":"Login with Steam first to request coordinates"]">
							@if (SeedIsRequested)
							{
								<MudProgressCircular Size="Size.Medium" Color="Color.Warning" Indeterminate="true" hidden=@(SeedExistsInMapExplorer||!MNI_Embedded) />
							}
							else
							{
								<MudFab Disabled=@(!LocalStorageHelper.TryGetMNIToken(out _)) Size=Size.Medium EndIcon="@Icons.Material.Filled.PlaylistAdd" IconColor="Color.Warning" hidden=@(SeedExistsInMapExplorer||!MNI_Embedded) OnClick="(_)=>RequestOrOpenInNewTab()"></MudFab>
							}
						</MudTooltip>
						<MudTooltip Arrow Text="@L["View in the Map Explorer"]">
							<MudFab Size=Size.Medium EndIcon="@Icons.Material.Filled.OpenInNew" Color="Color.Success" hidden=@(!SeedExistsInMapExplorer||!MNI_Embedded) OnClick="(_)=> OpenExplorerInNewTab()"></MudFab>
						</MudTooltip>
					}
				}
			</MudStack>
			<MudVirtualize Items="@QueryResult.asteroidsWithTraits" Context="asteroidQueryResult">
				@if (!LocalStorageHelper.HideTraitlessAsteroids || !asteroidQueryResult.Asteroid.DisableWorldTraits)
				{
					<MudStack Row Spacing="0">
						<MudTooltip Text="@asteroidQueryResult.Asteroid.Name" Arrow="true" Placement="Placement.Start">
							<MudImage ObjectFit="ObjectFit.Contain" Width="55" Height="55" Src="@asteroidQueryResult.Asteroid.Image" Alt="@asteroidQueryResult.Asteroid.Name" />
						</MudTooltip>
						<MudVirtualize Items="@asteroidQueryResult.GetTraitsForUI()" Context="trait">
							@{
								bool isDarkTheme = LocalStorageHelper.DarkThemeActive;
								string outlineStyle = SearchQuery.AsteroidHasTraitGuaranteed(asteroidQueryResult.Asteroid, trait) ? $"outline-style:solid; outline-color:#{trait.ColorHex};" : string.Empty;

								string modifierColor = isDarkTheme ? "black" : "white";

								string backgroundColorStyle = $"background-color:color-mix(in srgb, #{trait.ColorHex},{modifierColor} 66%);  outline-width:2px; {outlineStyle}";
								string colorStyle = $"background-color:#{trait.ColorHex};  outline-width:2px; {outlineStyle}";
								string imageStyle = "margin-left:-5px; margin-right:5px";
								string evilInvisibleString = " ";
							}
							<MudTooltip Text="@L[@trait.Name]" Arrow="true" Placement="Placement.Top">
								<MudChip T="string" Variant="Variant.Text" Style="@backgroundColorStyle">
									<MudImage ObjectFit="ObjectFit.Contain" Width="20" Height="20" Src="@trait.Image" />
								</MudChip>
							</MudTooltip>
						</MudVirtualize>
						@if (asteroidQueryResult.IsMixing)
						{
							<MudTooltip Style="white-space: pre-line" Text="@L["Currently, the ingame colony destination screen has a bug,\n that causes the traits shown there for asteroid remixes to be wrong.\n\nThe traits shown here are those that will actually be generated,\neven if the colony destination screen says otherwise."]" Arrow="true" Placement="Placement.Top">
								
								<MudChip T="string" Variant="Variant.Outlined" Color="Color.Warning">
									<MudImage ObjectFit="ObjectFit.Contain" Width="20" Height="20" Src="icons/warning.png" />
								</MudChip>
							</MudTooltip>
						}
					</MudStack>
				}
			</MudVirtualize>
			@if ((QueryResult?.cluster?.ForbiddenDlcs?.Contains(Client.Model.Dlc.SPACEDOUT) ?? false) || (QueryResult?.cluster?.RequiredDlcs?.Contains(Client.Model.Dlc.BASEGAME) ?? false))
			{
				<MudButton FullWidth Variant="Variant.Outlined" Color="Color.Default" OnClick="@ToggleStarmap">@L[!QueryResult.ShowStarmap ? "Show Starmap" : "Hide Starmap"]</MudButton>

				if (QueryResult.ShowStarmap)
				{
					<MudStack Spacing="4">
						<MudVirtualize T="DistanceBand" Items="@QueryResult.distanceBands.OrderBy(band => band.Distance).ToList()" Context="distanceEntry">
							@if (!LocalStorageHelper.HideLocationlessDistances || distanceEntry.HasLocations)
							{
								<MudDivider></MudDivider>
								<MudStack Row Spacing="0" AlignItems="AlignItems.Center" Style="min-height:40px">
									<MudText>@distanceEntry.GetDistanceText()</MudText>
									<MudVirtualize T="VanillaStarmapLocation" Items="@distanceEntry.Destinations" Context="location">
										@{
											bool isDarkTheme = LocalStorageHelper.DarkThemeActive;
											string reverseColor = !isDarkTheme ? "black" : "white";
											string outlineStyle = SearchQuery.RequiredStarmapLocations.Contains(location) ? $"outline-style:solid; outline-color:{reverseColor};" : string.Empty;

											string modifierColor = isDarkTheme ? "black" : "white";

											string backgroundColorStyle = $"outline-width:2px; {outlineStyle}";
											string colorStyle = $"outline-width:2px; {outlineStyle}";
											string imageStyle = "margin-left:-5px; margin-right:5px";
											string evilInvisibleString = " ";
										}
										<MudTooltip Text="@L[@location.Name]" Arrow="true" Placement="Placement.Bottom">
											<MudChip T="string" Variant="Variant.Text" Style="@backgroundColorStyle">
												<MudImage ObjectFit="ObjectFit.Contain" Width="20" Height="20" Src="@location.Image" />
											</MudChip>
										</MudTooltip>
									</MudVirtualize>
								</MudStack>
							}
						</MudVirtualize>
					</MudStack>
				}
			}
		</MudStack>
	</MudPaper>
</MudItem>

@code {

	[CascadingParameter]
	protected MudTheme Theme { get; set; }

	[Parameter]
	[EditorRequired]
	public QueryResult QueryResult
	{
		get => _queryResult;
		set
		{
			_queryResult = value;
			SeedIsRequested = false;
			IsFailedSeed = false;
			if (_timer != null)
				_timer.Enabled = false;
			RefreshSeedInDBState();
		}
	}

	private QueryResult _queryResult;

	[Parameter]
	[EditorRequired]
	public SearchQuery SearchQuery { get; set; }

	private void ToggleStarmap() => QueryResult.ShowStarmap = !QueryResult.ShowStarmap;
	private bool SeedExistsInMapExplorer = false;
	private bool IsFailedSeed = false;
	private bool SeedIsRequested = false;
	private bool MNI_Embedded = false;

	protected override async Task OnInitializedAsync()
	{
		MNI_Embedded = LocalStorageHelper.IsEmbeddedIn(out _);
#if DEBUG
		MNI_Embedded = true;
		//IsFailedSeed = true;
#endif
		await RefreshSeedInDBState();
	}
	async Task RefreshSeedInDBState()
	{
		string coordinate = QueryResult.GetCoordinate();
		string request = string.Format(ExternalRoutes.API_URL_CHECK_MAP_EXISTS, coordinate);

		HttpResponseMessage? mapExistsRequest = await Http.GetAsync(request);
		SeedExistsInMapExplorer = mapExistsRequest?.IsSuccessStatusCode ?? false;

		if (mapExistsRequest?.StatusCode == System.Net.HttpStatusCode.NotAcceptable)
		{
			IsFailedSeed = true;
		}

		if (SeedExistsInMapExplorer)
			_timer.Enabled = false;
		StateHasChanged();
	}

	private System.Timers.Timer _timer = null;
	protected override void OnInitialized()
	{
		_timer = new();
		_timer.Interval = 30000;
		_timer.Elapsed += async (object? sender, ElapsedEventArgs e) =>
		{
			await InvokeAsync(RefreshSeedInDBState);
		};
		_timer.Enabled = false;
	}

	async Task RequestOrOpenInNewTab()
	{
		await RefreshSeedInDBState();
		if (SeedExistsInMapExplorer)
		{
			await OpenExplorerInNewTab();
		}
		else
		{
			await RequestSeed();
		}
	}
	async Task RequestSeed()
	{
		if (!LocalStorageHelper.TryGetMNIToken(out var token))
		{
			Snackbar.Add(L["Request not possible right now!"], Severity.Error);
			return;
		}

		var request = new HttpRequestMessage(HttpMethod.Post, ExternalRoutes.API_POST_REQUEST_COORDINATE)
			{
				Content = new StringContent(QueryResult.GetCoordinate())
			};
		request.Headers.Add("token", token);
		var response = await Http.SendAsync(request);

		if (response.IsSuccessStatusCode)
		{
			Snackbar.Add(L["Seed request for Map Explorer sent!"], Severity.Success);
			SeedIsRequested = true;
		}
		else if (response.StatusCode == System.Net.HttpStatusCode.Conflict)
		{
			Snackbar.Add(L["Map was already requested, please be patient!"], Severity.Warning);
			Console.WriteLine($"conflict: {response.StatusCode}");
			SeedIsRequested = true;
		}
		else
		{
			Snackbar.Add(L["Seed request for Map Explorer failed!"], Severity.Error);
			Console.WriteLine($"Request failed: {response.StatusCode}");
		}
		_timer.Enabled = true;
	}

	async Task OpenExplorerInNewTab()
	{
		string url = string.Format(ExternalRoutes.MNI_VIEW_IN_EXPLORER, QueryResult.GetCoordinate());
		await JSRuntime.InvokeVoidAsync("open", url, "_blank");
	}
	async Task CopyToClipboard(string text)
	{
		try
		{
			await ClipboardService.WriteTextAsync(text);
			Snackbar.Add(L["Seed copied to the clipboard!"], Severity.Success);
		}
		catch
		{
			Console.WriteLine(L["Cannot write text to clipboard"]);
		}
	}
}
